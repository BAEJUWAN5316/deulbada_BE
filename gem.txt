# ERD

---

## 👤 User (회원)

| 필드 | 타입 | 설명 |
| --- | --- | --- |
| id | PK | 사용자 고유 ID |
| username | string | 사용자명 |
| email | string | 이메일 |
| password | string | 암호화된 비밀번호 |
| profile_image | string (URL) | 프로필 사진 |
| bio | text | 자기소개 |
| created_at | datetime | 가입일시 |

---

## 🍊 Product (감귤 상품)

| 필드 | 타입 | 설명 |
| --- | --- | --- |
| id | PK | 상품 고유 ID |
| seller_id | FK → User.id | 판매자 |
| name | string | 상품명 |
| description | text | 설명 |
| price | int | 가격 |
| stock | int | 재고 수량 |
| image_urls | JSON or 별도 테이블 | 이미지 리스트 |
| variety | string | 품종 (선택) |
| region | string | 재배 지역 (선택) |
| harvest_date | date | 수확 시기 (선택) |
| created_at | datetime | 등록일시 |

---

## 📝 Post (게시글)

| 필드 | 타입 | 설명 |
| --- | --- | --- |
| id | PK | 게시글 고유 ID |
| author_id | FK → User.id | 작성자 |
| content | text | 게시글 텍스트 |
| image_urls | JSON or 별도 테이블 | 이미지 리스트 |
| created_at | datetime | 작성일시 |

---

## 💬 Comment (댓글)

| 필드 | 타입 | 설명 |
| --- | --- | --- |
| id | PK | 댓글 ID |
| post_id | FK → Post.id | 댓글 단 게시글 |
| author_id | FK → User.id | 댓글 작성자 |
| content | text | 댓글 내용 |
| created_at | datetime | 작성일시 |

---

## ❤️ Like (좋아요)

| 필드 | 타입 | 설명 |
| --- | --- | --- |
| id | PK | 좋아요 ID |
| user_id | FK → User.id | 누른 유저 |
| post_id | FK → Post.id | 좋아요 대상 게시글 |
| created_at | datetime | 누른 시간 |

---

## 👥 Follow (팔로우)

| 필드 | 타입 | 설명 |
| --- | --- | --- |
| id | PK | 팔로우 관계 ID |
| follower_id | FK → User.id | 나 (팔로우하는 사람) |
| following_id | FK → User.id | 상대방 (팔로우 당하는 사람) |
| created_at | datetime | 팔로우한 시점 |

---

## 💬 ChatRoom (채팅방)

| 필드 | 타입 | 설명 |
| --- | --- | --- |
| id | PK | 채팅방 ID |
| user1_id | FK → User.id | 대화 참여자 1 |
| user2_id | FK → User.id | 대화 참여자 2 |
| created_at | datetime | 생성일시 |

---

## ✉️ Message (메시지)

| 필드 | 타입 | 설명 |
| --- | --- | --- |
| id | PK | 메시지 ID |
| room_id | FK → ChatRoom.id | 소속 채팅방 |
| sender_id | FK → User.id | 보낸 사람 |
| content | text | 텍스트 내용 |
| image_url | string (optional) | 이미지 메시지 (선택) |
| is_read | boolean | 읽음 여부 |
| created_at | datetime | 전송 시간 |

---

## 🚨 Report (신고)

| 필드 | 타입 | 설명 |
| --- | --- | --- |
| id | PK | 신고 ID |
| reporter_id | FK → User.id | 신고한 사람 |
| target_type | enum | 'user', 'post', 'comment', 'product', 'message' |
| target_id | int | 해당 대상 ID |
| reason | text | 신고 사유 |
| created_at | datetime | 신고 시간 |


## **배주완 담당자**

| 기능명 | 개발 예정일 | 우선순위 |
| --- | --- | --- |
| `Product` 모델 설계 | Day 1 | 필수 |
| 상품 등록 / 수정 / 삭제 API | Day 2 | 필수 |
| 채팅 모델 (ChatRoom / Message) 생성 | Day 3 | 핵심 |
| 채팅방 목록 조회 API | Day 4 | 핵심 |
| 알림 모델 설계 | Day 5 | 보완 |
| 이미지 검증 로직 구현 | Day 6 | 보완 |
| 메시지 전송 API | Day 7 | 핵심 |
| 알림 기능 API 구현 | Day 8 | 보완 |
| 채팅 기능 고도화 | Day 8 | 핵심 |


# 카테고리 연결 방식

## 

```
text
복사편집
[ Category ]   ← 1차, 2차 카테고리 정보 들어있는 테이블
     ↑
[ ProductCategory ]  ← 중간 테이블 (ManyToMany 연결)
     ↑
[ Product ]     ← 실제 상품 정보 (이름, 가격, 원산지 등)

```

- **Category**: "농산물", "수산물", "뿌리채소류" 이런 카테고리들 저장
- **ProductCategory**: 특정 상품이 어떤 카테고리에 속해 있는지 연결
- **Product**: 진짜 상품 데이터

---

## 📦 예시 데이터

| Category ID | name | parent_id |
| --- | --- | --- |
| 1 | 농산물 | NULL      ← 1차 |
| 2 | 뿌리채소류 | 1         ← 2차 (1의 하위) |
| 3 | 수산물 | NULL |
| 4 | 어패류 | 3 |

| Product ID | name | region | price |
| --- | --- | --- | --- |
| 1 | 당근 | 서귀포 | 5000 |
| 2 | 조개 | 부산 | 2000 |

| ProductCategory | product_id | category_id |
| --- | --- | --- |
|  | 1 | 2           ← 당근은 뿌리채소류 |
|  | 2 | 4           ← 조개는 어패류 |

---

## 🌐 사용자가 어떤 행동을 했을 때?

### ❓ 사용자가 "뿌리채소류" 버튼을 클릭했다!

그럼 프론트는 이렇게 요청해:

```
bash
복사편집
GET /api/products/?category=2

```

---

## 🧠 백엔드는 이렇게 처리해!

1. `category=2`라는 필터 값을 받음
2. `ProductCategory` 테이블에서 `category_id=2`인 상품을 찾음
3. 그 상품 ID로 `Product`를 조회해서 결과를 응답함

---

## 🎯 응답 결과 예시 (DRF 응답)

```json
json
복사편집
[
  {
    "id": 1,
    "name": "당근",
    "region": "서귀포",
    "price": 5000,
    "categories": ["농산물", "뿌리채소류"]
  }
]

```

---

## 🗺 전체 흐름 요약 그림으로 보면:

```
text
복사편집
사용자 클릭: "뿌리채소류"
     ↓
GET /api/products/?category=2
     ↓
ProductCategory → product_id = 1 찾음
     ↓
Product ID 1 ("당근") 불러오기
     ↓
프론트에 당근 정보 응답

```

---

## 💬 실제 코드 흐름 (진짜 간단하게)

### 🔍 ProductFilter

```python
python
복사편집
class ProductFilter(filters.FilterSet):
    category = filters.NumberFilter(method='filter_by_category')

    def filter_by_category(self, queryset, name, value):
        return queryset.filter(productcategory__category_id=value)

```

### 🧩 ViewSet

```python
python
복사편집
class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_class = ProductFilter

```

---

## 🧠 이해 팁

| 용어 | 쉽게 말하면 |
| --- | --- |
| `parent_id` | "누구 밑에 속해 있는지" |
| `category=2` | "이 카테고리에 속한 애들만 줘!" |
| `ManyToMany` | "하나의 상품이 여러 카테고리에 속할 수 있다" |
| `중간 테이블` | 둘 사이 연결 담당하는 다리 역할 |

---

## 🔚 요약하면?

> 사용자: "뿌리채소류 상품만 보여줘!"
> 
> 
> 프론트: `GET /api/products/?category=2`
> 
> 백엔드: ProductCategory → Product → 응답
> 
> 프론트: 해당 상품들 화면에 뿌림
>